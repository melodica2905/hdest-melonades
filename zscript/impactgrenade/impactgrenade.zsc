
const HDLD_GRE_IMPACT="img";
const ENC_IMPACTGRENADE=19;

class HDImpactGrenades:HDGrenadethrower{
	default{
		weapon.selectionorder 1010;
		weapon.slotpriority 1.1;
		weapon.slotnumber 0;
		tag "Impact Grenades";
		hdgrenadethrower.ammotype "HDImpactGrenadeAmmo";
		hdgrenadethrower.throwtype "HDImpactGrenade";
		hdgrenadethrower.spoontype "HDImpactSpoon";
		hdgrenadethrower.wiretype "ImpactTripwireFrag";
		inventory.icon "IMPGA0";
	}

	override string gethelptext(){
		if(weaponstatus[0]&FRAGF_SPOONOFF)return
		WEPHELP_FIRE.."  Wind up, release to throw\n(\cxSTOP READING AND DO THIS"..WEPHELP_RGCOL..")";
		return
		WEPHELP_FIRE.."  Pull pin/wind up (release to throw)\n"
		//..WEPHELP_ALTFIRE.."  Pull pin, again to drop spoon\n"
		..WEPHELP_RELOAD.."  Abort/Replace pin\n"
		..WEPHELP_ZOOM.."  Start planting tripwire traps"
		;
	}

	override void DoEffect(){
		if(weaponstatus[0]&FRAGF_SPOONOFF){
			weaponstatus[FRAGS_TIMER]++;
			if(
				owner.health<1
				||weaponstatus[FRAGS_TIMER]>136
			)TossGrenade(true);
		}else if(
			weaponstatus[0]&FRAGF_INHAND
			&&weaponstatus[0]&FRAGF_PINOUT
			&&owner.player.cmd.buttons&BT_ATTACK
			&&owner.player.cmd.buttons&BT_ALTFIRE
			&&!(owner.player.oldbuttons&BT_ALTFIRE)
		){
			return;
		}
		super.doeffect();
	}
	
	override string,double getpickupsprite(){return "IMPGA0",0.6;}
	override string GetStatusIcon(){
		return (weaponstatus[0]&FRAGF_PINOUT)?"IMPGF0":"IMPGA0";
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		let statusicon=GetStatusIcon();
		if(sb.hudlevel==1){
			sb.drawimage(
				statusicon,
				(-52,-4),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.6,0.6)
			);
			sb.drawnum(hpl.countinv(grenadeammotype),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(
			hpl.countinv("HDImpactGrenadeAmmo"),
			(HDCONST_MAXPOCKETSPACE/ENC_IMPACTGRENADE)
		);
		sb.drawwepnum(hdw.weaponstatus[FRAGS_FORCE],50,posy:-10,alwaysprecise:true);
		if(!(hdw.weaponstatus[0]&FRAGF_SPOONOFF)){
			sb.drawrect(-21,-19,5,4);
			if(!(hdw.weaponstatus[0]&FRAGF_PINOUT))sb.drawrect(-25,-18,3,2);
		}else{
			int timer=hdw.weaponstatus[FRAGS_TIMER];
			if(timer%3)sb.drawwepnum(140-timer,140,posy:-15,alwaysprecise:true);
		}

		//draw the item and guide lines
		if(
			!(hdw.weaponstatus[0]&FRAGF_SPOONOFF)
			||level.time&1
		)sb.drawimage(statusicon,(0,30+(hdw.weaponstatus[FRAGS_HOLDINGFIRE]<<2))+hpl.wepbob,
			sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
			alpha:(hdw.weaponstatus[0]&FRAGF_INHAND)||hpl.countinv("HDImpactGrenadeAmmo")?1.:0.3,
			scale:(1.2,1.2)
		);
		if(hdw.weaponstatus[FRAGS_FORCE]>0)for(int i=hdw.weaponstatus[FRAGS_FORCE];i>0;i--){
			if(i&(1|2|4))continue;
			sb.drawrect(25,-30-(i<<1),8,0.5);
			sb.drawrect(-25,-30-(i<<1),-8,0.5);
		}
	}

	override void ForceBasicAmmo(){
		owner.A_SetInventory("HDImpactGrenadeAmmo",1);
	}
	
	states
	{
	ready:
		TNT1 A 0{
			invoker.weaponstatus[FRAGS_FORCE]=0;
			invoker.weaponstatus[FRAGS_REALLYPULL]=0;
		}
		TNT1 A 1 A_WeaponReady(WRF_NOSECONDARY|WRF_ALLOWRELOAD|WRF_ALLOWZOOM|WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4);
		goto ready3;
	deselectinstant:
		TNT1 A -1 A_TakeInventory("HDImpactGrenades", 1);
		stop;
	startpull:
		TNT1 A 1{
			if(invoker.weaponstatus[FRAGS_REALLYPULL]>=26)setweaponstate("endpull");
			else invoker.weaponstatus[FRAGS_REALLYPULL]++;
		}
		TNT1 A 0 A_Refire();
		goto ready;
	endpull:
		TNT1 A 1 offset(0,34);
		TNT1 A 0;
		TNT1 A 0 A_PullPin();
		TNT1 A 0 A_Refire();
		goto ready;
	fire:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_JUSTTHREW,"nope");
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 0 A_JumpIfInventory("PowerStrength",1,3);
		TNT1 A 1 offset(0,34);
		TNT1 A 1 offset(0,36);
		TNT1 A 1 offset(0,38);
		TNT1 A 0 A_Refire();
		goto ready;
	hold:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_JUSTTHREW,"nope");
		//TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_PINOUT,"hold2");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=1,"hold2");
		TNT1 A 0 A_JumpIfInventory("PowerStrength",1,1);
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 3 A_PullPin();
	hold2:
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=40,"hold3a");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=30,"hold3a");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=20,"hold3");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=10,"hold3");
		goto hold3;
	hold3a:
		FRGG # 0{
			if(invoker.weaponstatus[FRAGS_FORCE]<50)invoker.weaponstatus[FRAGS_FORCE]++;
		}
	hold3:
		FRGG # 1{
			A_WeaponReady(
				invoker.weaponstatus[0]&FRAGF_SPOONOFF?WRF_NOFIRE:WRF_NOFIRE|WRF_ALLOWRELOAD
			);
			if(invoker.weaponstatus[FRAGS_FORCE]<50)invoker.weaponstatus[FRAGS_FORCE]++;
		}
		TNT1 A 0 A_Refire();
		goto throw;
	throw:
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 1 offset(0,34) A_TossGrenade();
		TNT1 A 1 offset(0,38);
		TNT1 A 1 offset(0,48);
		TNT1 A 1 offset(0,52);
		TNT1 A 0 A_Refire();
		goto ready;
		reload:
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=1,"pinbackin");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_PINOUT,"altpinbackin");
		goto ready;
	pinbackin:
		TNT1 A 1 offset(0,34) A_ReturnHandToOwner();
		TNT1 A 1 offset(0,36);
		TNT1 A 1 offset(0,38);
	altpinbackin:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_TIMER]>0,"juststopthrowing");
		TNT1 A 1 A_ReturnHandToOwner();
		TNT1 A 0 A_Refire("nope");
		TNT1 A 1 offset(0,38);
		TNT1 A 1 offset(0,36);
		TNT1 A 1 offset(0,34);
		goto ready;
	}
}

class ImpactTripwireFrag:Tripwire{
	default{
		weapon.selectionorder 1011;
		tripwire.ammotype "HDImpactGrenadeAmmo";
		tripwire.throwtype "ImpactTrippingFrag";
		tripwire.spoontype "HDImpactSpoon";
		tripwire.weptype "HDImpactGrenades";
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("IMPGA0",(-52,-4),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.6,0.6));
			sb.drawnum(hpl.countinv("HDImpactGrenadeAmmo"),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(
			hpl.countinv("HDImpactGrenadeAmmo"),
			(ENC_FRAG/HDCONST_MAXPOCKETSPACE)
		);
		sb.drawwepnum(hdw.weaponstatus[FRAGS_FORCE],50,posy:-10,alwaysprecise:true);
		if(!(hdw.weaponstatus[0]&FRAGF_SPOONOFF)){
			sb.drawrect(-21,-19,5,4);
			if(!(hdw.weaponstatus[0]&FRAGF_PINOUT))sb.drawrect(-25,-18,3,2);
		}else{
			int timer=hdw.weaponstatus[FRAGS_TIMER];
			if(timer%3)sb.drawwepnum(140-timer,140,posy:-15,alwaysprecise:true);
		}
	}
}

class ImpactTrippingFrag:TrippingGrenade{
	default{
		//$Category "Misc/Hideous Destructor/Traps"
		//$Title "Tripwire Grenade"
		//$Sprite "FRAGA0"

		scale 0.4;
		trippinggrenade.rollertype "HDImpactGrenadeRoller";
		trippinggrenade.spoontype "HDImpactSpoon";
		trippinggrenade.droptype "HDImpactGrenadeAmmo";
		hdupk.pickuptype "HDImpactGrenadeAmmo";
	}
	override void postbeginplay(){
		super.postbeginplay();
		pickupmessage=getdefaultbytype("HDImpactGrenadeAmmo").pickupmessage();
	}
	states{
	spawn:
		IMPG A 1 nodelay A_TrackStuckHeight();
		wait;
	}
}

class HDImpactGrenadeRoller:HDFragGrenadeRoller{
	default{
		scale 0.3;
		obituary "%o was fragged by %k.";
		radiusdamagefactor 0.04;pushfactor 1.4;maxstepheight 2;mass 500;
	}
	states{
	spawn:
		IMPG A 1;
		Loop;
	spawn2:
		/*#### BCD 2{
			if(abs(vel.z-keeprolling.z)>10)A_StartSound("misc/fragknock",CHAN_BODY);
			else if(floorz>=pos.z)A_StartSound("misc/fragroll");
			keeprolling=vel;
			if(abs(vel.x)<0.4 && abs(vel.y)<0.4) setstatelabel("destroy");
		}loop;*/
	bounce:
		/*---- A 0{
			bmissile=false;
			vel*=0.3;
		}goto spawn2;*/
	death:
		/*---- A 2{
			if(abs(vel.z-keeprolling.z)>3){
				A_StartSound("misc/fragknock",CHAN_BODY);
				keeprolling=vel;
			}
			if(abs(vel.x)>0.4 || abs(vel.y)>0.4) setstatelabel("destroy");
		}wait;*/
	destroy:
		TNT1 A 1{
			bsolid=false;bpushable=false;bmissile=false;bnointeraction=true;bshootable=false;
			A_HDBlast(
				pushradius:256,pushamount:118,fullpushradius:96,
				fragradius:300
			);
			DistantQuaker.Quake(self,4,35,512,10);
			A_StartSound("world/explode",CHAN_AUTO);
			A_AlertMonsters();
			actor xpl=spawn("WallChunker",self.pos-(0,0,1),ALLOW_REPLACE);
				xpl.target=target;xpl.master=master;xpl.stamina=stamina;
			xpl=spawn("HDExplosion",self.pos-(0,0,1),ALLOW_REPLACE);
				xpl.target=target;xpl.master=master;xpl.stamina=stamina;
			A_SpawnChunks("BigWallChunk",14,4,12);
			A_SpawnChunks("HDB_frag",42,300,700);
			distantnoise.make(self,"world/rocketfar");
		}
		stop;
	}
}
class HDImpactGrenade:HDFragGrenade{
	default{
		scale 0.3;
		obituary "%o was fragged by %k.";
		hdfraggrenade.rollertype "HDImpactGrenadeRoller";
		Mass 1500;
	}
	states
	{
	spawn:
		IMPG BCD 2;
		loop;
	}
}

class HDImpactGrenadeAmmo:HDAmmo{
	default{
		//+forcexybillboard
		inventory.icon "IMPGA0";
		inventory.amount 1;
		scale 0.3;
		inventory.maxamount 50;
		inventory.pickupmessage "Picked up a Impact Grenade.";
		inventory.pickupsound "weapons/pocket";
		tag "Impact Grenades";
		hdpickup.refid HDLD_GRE_IMPACT;
		hdpickup.bulk ENC_IMPACTGRENADE;
		+INVENTORY.KEEPDEPLETED
	}
	override bool IsUsed(){return true;}
	override void AttachToOwner(Actor user)
	{
		user.GiveInventory("HDImpactGrenades", 1);
		super.AttachToOwner(user);
	}
	override void DetachFromOwner()
	{
		if(owner && owner.player && !(owner.player.ReadyWeapon is "HDImpactGrenades"))
		{
			owner.TakeInventory("HDImpactGrenades", 1);
		}
		super.DetachFromOwner();
	}
	states{
	spawn:
		IMPG A -1;stop;
	}
}

class HDImpactSpoon : HDFragSpoon
{
	default
	{
		Scale 0.45;
	}
	states{
	spawn:
		TNT1 A 0;
		stop;
		TFPN A 2{roll+=40;}wait;
	death:
		TFPN A -1;
	}
}

class ImpactFragP:HDUPK{
	default{
		//+forcexybillboard
		scale 0.4;height 3;radius 3;
		hdupk.amount 1;
		hdupk.pickuptype "HDImpactGrenadeAmmo";
		hdupk.pickupmessage "Picked up an Impact Grenade.";
		hdupk.pickupsound "weapons/rifleclick2";
		stamina 1;
	}
	override void postbeginplay(){
		super.postbeginplay();
		pickupmessage=getdefaultbytype("HDImpactGrenadeAmmo").pickupmessage();
	}
	states{
	spawn:
		IMPG A -1;
	}
}

class HDImpactGrenadePickup:ImpactFragP{
	override void postbeginplay(){
		super.postbeginplay();
		A_SpawnItemEx("ImpactFragP",5,5,flags:SXF_NOCHECKPOSITION);
		A_SpawnItemEx("ImpactFragP",5,0,flags:SXF_NOCHECKPOSITION);
		A_SpawnItemEx("ImpactFragP",0,5,flags:SXF_NOCHECKPOSITION);
		A_SpawnItemEx("ImpactFragP",-5,5,flags:SXF_NOCHECKPOSITION);
		A_SpawnItemEx("ImpactFragP",-5,0,flags:SXF_NOCHECKPOSITION);
	}
}
