
const HDLD_GRE_STONE="stn";
const ENC_AGODDAMNSTONE=18;

class HDStoneGrenades:HDGrenadethrower{
	default{
		weapon.selectionorder 1000;
		weapon.slotpriority 0.9;
		weapon.slotnumber 0;
		tag "Stones";
		hdgrenadethrower.ammotype "HDStoneGrenadeAmmo";
		hdgrenadethrower.throwtype "HDStoneGrenade";
		hdgrenadethrower.spoontype "NoSpoonForU";
		inventory.icon "STNEA0";
	}
	
	override string gethelptext(){
		if(weaponstatus[0]&FRAGF_SPOONOFF)return
		WEPHELP_FIRE.."  Wind up (release to throw)\n"..WEPHELP_RGCOL..")";
		return
		WEPHELP_FIRE.."  Wind up (release to throw)\n"
		..WEPHELP_RELOAD.."  Abort throw\n"
		;
	}
	
	override void DoEffect(){
		if(weaponstatus[0]&FRAGF_SPOONOFF){
			weaponstatus[FRAGS_TIMER]++;
			if(
				owner.health<1
				||weaponstatus[FRAGS_TIMER]>136
			)TossGrenade(true);
		}else if(
			weaponstatus[0]&FRAGF_INHAND
			&&weaponstatus[0]&FRAGF_PINOUT
			&&owner.player.cmd.buttons&BT_ATTACK
			&&owner.player.cmd.buttons&BT_ALTFIRE
			&&!(owner.player.oldbuttons&BT_ALTFIRE)
		){
			return;
		}
		super.doeffect();
	}
	
	override string,double getpickupsprite(){return "STNEA0",0.8;}
	override string GetStatusIcon(){
		return (weaponstatus[0]&FRAGF_PINOUT)?"STNEF0":"STNEA0";
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		let statusicon=GetStatusIcon();
		if(sb.hudlevel==1){
			sb.drawimage(
				statusicon,
				(-52,-4),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.6,0.6)
			);
			sb.drawnum(hpl.countinv(grenadeammotype),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(
			hpl.countinv("HDStoneGrenadeAmmo"),
			(HDCONST_MAXPOCKETSPACE/ENC_AGODDAMNSTONE)
		);
		sb.drawwepnum(hdw.weaponstatus[FRAGS_FORCE],50,posy:-10,alwaysprecise:true);
		if(!(hdw.weaponstatus[0]&FRAGF_SPOONOFF)){
			sb.drawrect(-21,-19,5,4);
			if(!(hdw.weaponstatus[0]&FRAGF_PINOUT))sb.drawrect(-25,-18,3,2);
		}else{
			int timer=hdw.weaponstatus[FRAGS_TIMER];
			if(timer%3)sb.drawwepnum(140-timer,140,posy:-15,alwaysprecise:true);
		}

		//draw the item and guide lines
		if(
			!(hdw.weaponstatus[0]&FRAGF_SPOONOFF)
			||level.time&1
		)sb.drawimage(statusicon,(0,30+(hdw.weaponstatus[FRAGS_HOLDINGFIRE]<<2))+hpl.wepbob,
			sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
			alpha:(hdw.weaponstatus[0]&FRAGF_INHAND)||hpl.countinv("HDStoneGrenadeAmmo")?1.:0.3,
			scale:(1.2,1.2)
		);
		if(hdw.weaponstatus[FRAGS_FORCE]>0)for(int i=hdw.weaponstatus[FRAGS_FORCE];i>0;i--){
			if(i&(1|2|4))continue;
			sb.drawrect(25,-30-(i<<1),8,0.5);
			sb.drawrect(-25,-30-(i<<1),-8,0.5);
		}
	}

	override void ForceBasicAmmo(){
		owner.A_SetInventory("HDStoneGrenadeAmmo",1);
	}

	action void A_PullPinStone(){
		invoker.weaponstatus[FRAGS_REALLYPULL]=0;
		invoker.weaponstatus[0]|=(FRAGF_PINOUT|FRAGF_INHAND);
		A_TakeInventory(invoker.grenadeammotype,1,TIF_NOTAKEINFINITE);
	}
	
	Action void A_ReturnHandToOwnerStone(){invoker.ReturnHandToOwnerStone();}
	void ReturnHandToOwnerStone(){
		if(!owner)return;
		int wepstat=weaponstatus[0];
		if(wepstat&FRAGF_INHAND){
			if(wepstat&FRAGF_SPOONOFF)TossGrenade(true);
			else{
				if(wepstat&FRAGF_PINOUT){
					weaponstatus[0]&=~FRAGF_PINOUT;
				}
				if(
					owner.A_JumpIfInventory(grenadeammotype,0,"null")
				)owner.A_DropItem(grenadeammotype);
				else HDF.Give(owner,grenadeammotype,1);
			}
		}
		weaponstatus[0]&=~FRAGF_INHAND;
		weaponstatus[FRAGS_FORCE]=0;
		weaponstatus[FRAGS_REALLYPULL]=0;
	}
	
	states
	{
	ready:
		TNT1 A 0{
			invoker.weaponstatus[FRAGS_FORCE]=0;
			invoker.weaponstatus[FRAGS_REALLYPULL]=0;
		}
		TNT1 A 1 A_WeaponReady(WRF_NOSECONDARY|WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4);
		goto ready3;
	deselectinstant:
		TNT1 A -1 A_TakeInventory("HDStoneGrenades", 1);
		stop;
	startpull:
		TNT1 A 1{
			if(invoker.weaponstatus[FRAGS_REALLYPULL]>=26)setweaponstate("endpull");
			else invoker.weaponstatus[FRAGS_REALLYPULL]++;
		}
		TNT1 A 0 A_Refire();
		goto ready;
	endpull:
		TNT1 A 1 offset(0,34);
		TNT1 A 0;
		TNT1 A 0 A_PullPinStone();
		TNT1 A 0 A_Refire();
		goto ready;
	fire:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_JUSTTHREW,"nope");
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 0 A_JumpIfInventory("PowerStrength",1,3);
		TNT1 A 1 offset(0,34);
		TNT1 A 1 offset(0,36);
		TNT1 A 1 offset(0,38);
		TNT1 A 0 A_Refire();
		goto ready;
	hold:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_JUSTTHREW,"nope");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_PINOUT,"hold2");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=1,"hold2");
		TNT1 A 0 A_JumpIfInventory("PowerStrength",1,1);
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 1 A_PullPinStone();
	hold2:
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=40,"hold3a");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=30,"hold3a");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=20,"hold3");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=10,"hold3");
		goto hold3;
	hold3a:
		FRGG # 0{
			if(invoker.weaponstatus[FRAGS_FORCE]<50)invoker.weaponstatus[FRAGS_FORCE]+=3;
		}
	hold3:
		FRGG # 1{
			A_WeaponReady(
				invoker.weaponstatus[0]&FRAGF_SPOONOFF?WRF_NOFIRE:WRF_NOFIRE|WRF_ALLOWRELOAD
			);
			if(invoker.weaponstatus[FRAGS_FORCE]<50)invoker.weaponstatus[FRAGS_FORCE]+=3;
		}
		TNT1 A 0 A_Refire();
		goto throw;
	throw:
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 1 offset(0,34) A_TossGrenade();
		TNT1 A 1 offset(0,38);
		TNT1 A 1 offset(0,48);
		TNT1 A 1 offset(0,52);
		TNT1 A 0 A_Refire();
		goto ready;
		reload:
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=1,"pinbackin");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_PINOUT,"altpinbackin");
		goto ready;
	pinbackin:
		TNT1 A 1 offset(0,34) A_ReturnHandToOwnerStone();
		TNT1 A 1 offset(0,36);
		TNT1 A 1 offset(0,38);
	altpinbackin:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_TIMER]>0,"juststopthrowing");
		TNT1 A 1 A_ReturnHandToOwnerStone();
		TNT1 A 0 A_Refire("nope");
		TNT1 A 1 offset(0,38);
		TNT1 A 1 offset(0,36);
		TNT1 A 1 offset(0,34);
		goto ready;
	}
}

class HDStoneGrenadeRoller:HDFragGrenadeRoller{
	default{
		scale 0.5;
		obituary "%o was stoned by %k.";
		radiusdamagefactor 0.04;pushfactor 1.4;maxstepheight 2;mass 500;
		+ROLLSPRITE
		+ROLLCENTER
		DamageFunction GetDamage();
		damagetype "bashing";
		deathsound "stone/impact";
	}
	states{
	spawn:
		STNE A 0;
	spawn2:
		#### BDFHACEG 2{
			if(abs(vel.z-keeprolling.z)>10)A_StartSound("misc/fragknock",CHAN_BODY);
			else if(floorz>=pos.z)A_StartSound("misc/fragroll");
			keeprolling=vel;
			if(abs(vel.x)<0.4 && abs(vel.y)<0.4) setstatelabel("death");
			A_SetRoll(random(-45, 45));
		}loop;
	bounce:
		---- A 0{
			bmissile=false;
			vel*=0.3;
		}goto spawn2;
	death:
		#### # 1;
	destroy:
		STNE # 0 {
			bsolid=false;bpushable=false;bmissile=false;bnointeraction=true;bshootable=false;
			A_SpawnItemEx("HDStoneGrenadeAmmo", flags:SXF_TRANSFERSPRITEFRAME|SXF_ISTRACER|SXF_NOCHECKPOSITION);
			tracer.SetStateLabel("spawn2");
			tracer.A_Stop();
		}
		TNT1 A 1;
		stop;
	}
	int GetDamage()
	{
		double dmg;
		double aa1 = abs(vel.x)*abs(vel.x);
		double aa2 = abs(vel.y)*abs(vel.y);
		double aa3 = abs(vel.z)*abs(vel.z);
		
		dmg=sqrt(aa1+aa2+aa3)*3.5;
		
		return int(dmg);
	}
}
class HDStoneGrenade:HDFragGrenade{
	default{
		scale 0.5;
		obituary "%o was stoned by %k.";
		hdfraggrenade.rollertype "HDStoneGrenadeRoller";
		Mass 50;
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEPAIN
		DamageFunction GetDamage();
		damagetype "bashing";
		deathsound "stone/impact";
	}
	
	override void tick(){
		ClearInterpolation();
		if(isfrozen())return;
		if(!bmissile){
			hdactor.tick();return;
		}else if(fuze<140){
			fuze++;
			keeprolling=vel;
			super.tick();
		}else{
			if(inthesky){
				destroy();return;
			}
			let gr=HDFragGrenadeRoller(spawn(rollertype,pos,ALLOW_REPLACE));
			gr.target=self.target;gr.master=self.master;gr.vel=self.vel;
			gr.fuze=fuze;
			destroy();return;
		}
	}
	
	int GetDamage()
	{
		double dmg;
		double aa1 = abs(vel.x)*abs(vel.x);
		double aa2 = abs(vel.y)*abs(vel.y);
		double aa3 = abs(vel.z)*abs(vel.z);
		
		dmg=sqrt(aa1+aa2+aa3)*3.5;
		
		return int(dmg);
	}
	
	override int SpecialMissileHit (Actor victim)
	{
		if(GetDamage() >= 66 && victim.health > 0 && HDMobBase(victim) && !HDMobBase(victim).bNOINCAP && victim.ResolveState("falldown") && !victim.InStateSequence(victim.CurState, victim.ResolveState("falldown")))
		{
			victim.SetStateLabel("falldown");
			return -1;
		}
		else if(GetDamage() >= 30 && victim.health > 0 && victim is "HDPlayerPawn" && !HDPlayerPawn(victim).incapacitated && victim != target)
		{
			HDPlayerPawn(victim).A_Incapacitated( HDPlayerPawn.HDINCAP_SCREAM, 35 );
			return -1;
		}
		else
			return -1;
	}
	
	states
	{
	spawn:
		STNE BDFHACEG 2 A_SetRoll(random(-90, 90));
		loop;
	}
}

class HDStoneGrenadeAmmo:HDAmmo{
	default{
		+forcexybillboard
		inventory.icon "STNEA0";
		inventory.amount 1;
		scale 0.5;
		inventory.maxamount 50;
		inventory.pickupmessage "Picked up a stone...";
		inventory.pickupsound "weapons/pocket";
		tag "Stones";
		hdpickup.refid HDLD_GRE_STONE;
		hdpickup.bulk ENC_AGODDAMNSTONE;
		+ROLLSPRITE
		+ROLLCENTER
	}
	override bool IsUsed(){return true;}
	override void AttachToOwner(Actor user)
	{
		user.GiveInventory("HDStoneGrenades", 1);
		super.AttachToOwner(user);
	}
	override void DetachFromOwner()
	{
		if(owner && owner.player && !(owner.player.ReadyWeapon is "HDStoneGrenades"))
		{
			owner.TakeInventory("HDStoneGrenades", 1);
		}
		super.DetachFromOwner();
	}
	states{
	spawn:
		STNE A 0 nodelay { A_SetRoll(random(-25,25)); frame=random(0,7); }
		STNE # -1;stop;
	spawn2:
		STNE # -1;stop;
	}
}

class StoneGrenadeP:HDUPK{
	default{
		+forcexybillboard
		scale 0.5;height 3;radius 3;
		hdupk.amount 1;
		hdupk.pickuptype "HDStoneGrenadeAmmo";
		hdupk.pickupmessage "Picked up an stone...";
		hdupk.pickupsound "weapons/rifleclick2";
		stamina 1;
	}
	override void postbeginplay(){
		super.postbeginplay();
		pickupmessage=getdefaultbytype("HDStoneGrenadeAmmo").pickupmessage();
	}
	states{
	spawn:
		STNE A -1;
	}
}

class StonePileSpawner : Actor{
	states{
	spawn:
		TNT1 A 0 NODELAY A_DropItem("HDStoneGrenadeAmmo", 1, 256);
		TNT1 AA 0 A_DropItem("HDStoneGrenadeAmmo", 1, 256);
		TNT1 AAAAAAAAAAAA 0 A_DropItem("HDStoneGrenadeAmmo", 1, 80);
		stop;
	}
}

class NoSpoonForU : Actor
{
	states
	{
		spawn:
			tnt1 a 1;
			stop;
	}
}
